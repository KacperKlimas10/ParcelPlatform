x-kong-config: &kong-env
  KONG_DATABASE: postgres             # Use Postgres as the backing database
  KONG_PG_HOST: kong-ee-database      # Hostname of the Postgres service
  KONG_PG_DATABASE: kong              # Name of the database to connect to
  KONG_PG_USER: kong                  # Database username
  KONG_PG_PASSWORD: kong              # Database password
  #KONG_LICENSE_DATA: "${KONG_LICENSE_DATA}"  # Kong Enterprise license passed via environment variable

services:

  # AWS CLOUD ENVIRONMENT

#  localstack:
#    image: localstack/localstack
#    ports:
#      - "4566:4566"            # LocalStack Gateway
#      - "4510-4559:4510-4559"  # external services port range
#    environment:
#      # LocalStack configuration: https://docs.localstack.cloud/references/configuration/
#      - DEBUG=${DEBUG:-0}
#    volumes:
#      - "./localstack/volume:/var/lib/localstack"
#      - "/var/run/docker.sock:/var/run/docker.sock"

  # API GATEWAY

  kong-ee-database:
    container_name: kong-ee-database
    image: postgres:latest
    restart: on-failure
    volumes:
      - kong_db_data:/var/lib/postgresql/data
    networks:
      - kong-ee-net
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "kong" ]
      interval: 5s
      timeout: 10s
      retries: 10

  kong-bootstrap:
    image: '${GW_IMAGE:-kong/kong-gateway:3.11.0.2}'
    container_name: kong-bootstrap
    networks:
      - kong-ee-net
    depends_on:
      kong-ee-database:
        condition: service_healthy
    restart: on-failure
    environment:
      <<: *kong-env
      KONG_PASSWORD: handyshake
    command: kong migrations bootstrap

  kong-cp:
    image: '${GW_IMAGE:-kong/kong-gateway:3.11.0.2}'
    container_name: kong-cp
    restart: on-failure
    networks:
      - kong-ee-net
      - backend-network
    environment:
      <<: *kong-env
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
      KONG_ADMIN_GUI_LISTEN: 0.0.0.0:8002, 0.0.0.0:8445 ssl
      KONG_ADMIN_GUI_URL: http://${GW_HOST:-localhost}:8002
      KONG_PASSWORD: handyshake
    depends_on:
      kong-bootstrap:
        condition: service_completed_successfully
    ports:
      - "8000:8000"  # Proxy HTTP
      - "8443:8443"  # Proxy HTTPS
      - "8001:8001"  # Admin API HTTP
      - "8444:8444"  # Admin API HTTPS
      - "8002:8002"  # Kong Manager HTTP
      - "8445:8445"  # Kong Manager HTTPS

  # IDENTITY PROVIDER

  keycloak:
    image: quay.io/keycloak/keycloak:26.3.2
    restart: always
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
    ports:
      - "8082:8080"
    networks:
      - backend-network
    command: start-dev

  # MICROSERVICES

  # BROKERS

  rabbitmq:
    image: rabbitmq:latest
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: kacper
      RABBITMQ_DEFAULT_PASS: kacper
      RABBITMQ_DEFAULT_VHOST: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq:/var/lib/rabbitmq
      - ./rabbitmq:/etc/rabbitmq
    networks:
      - backend-network

  # SECRETS

  vault:
    image: vault:1.13.3
    restart: always
    ports:
      - "8200:8200"
    volumes:
      - vault-file:/vault/file
      - ./vault/config:/vault/config
      - ./vault/logs:/vault/logs
    networks:
      - backend-network
    cap_add:
      - IPC_LOCK
    command: vault server -config=/vault/config/vault.json

  # REGISTRY

  registry:
    image: registry:latest
    restart: always
    volumes:
      - registry:/var/lib/registry
    networks:
      - backend-network

  # DATABASES

  postgresql:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_USER: kacper
      POSTGRES_PASSWORD: kacper
      POSTGRES_DB: hugoparcel
    ports:
      - "5432:5432"
    volumes:
      - postgresql:/var/lib/postgresql/data
    networks:
      - db-network
  redis:
    image: redis:latest
    restart: always
    volumes:
      - redis:/data
    networks:
      - backend-network
  mongo:
    image: mongo:latest
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: kacper
      MONGO_INITDB_ROOT_PASSWORD: kacper
    volumes:
      - mongo:/data/db
    networks:
      - db-network
  minio:
    image: quay.io/minio/minio:latest
    restart: always
    environment:
      MINIO_ROOT_USER: kacperkacper
      MINIO_ROOT_PASSWORD: kacperkacper
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio:/data
    networks:
      - db-network
    command: server /data --console-address ":9001"

  ## DATABASE GUI

  pgadmin:
    image: dpage/pgadmin4:latest
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: kacper@kacper.pl
      PGADMIN_DEFAULT_PASSWORD: kacper
    ports:
      - "8080:80"
    networks:
      - db-network
      - monitoring-network
  mongo-express:
    image: mongo-express:latest
    restart: always
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: kacper
      ME_CONFIG_MONGODB_ADMINPASSWORD: kacper
      ME_CONFIG_MONGODB_URL: mongodb://kacper:kacper@mongo:27017/
      ME_CONFIG_BASICAUTH: false
    networks:
      - db-network
      - monitoring-network
  redisinsight:
    image: redis/redisinsight:latest
    restart: always
    ports:
      - "5540:5540"
    volumes:
      - redisinsight:/data
    networks:
      - backend-network
      - monitoring-network

  # MONITORING

volumes:
  postgresql:
  redis:
  redisinsight:
  mongo:
  minio:
  rabbitmq:
  kong_db_data:
  registry:
  vault-file:

networks:
  backend-network:
  db-network:
  monitoring-network:
  kong-ee-net: