services:

  # API GATEWAY

  kong-cp:
    image: '${GW_IMAGE:-kong/kong-gateway:3.11.0.2}'
    restart: on-failure
    environment:
      KONG_DATABASE: off
      KONG_DECLARATIVE_CONFIG: /kong/declarative/kong.yml
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
      KONG_ADMIN_GUI_LISTEN: 0.0.0.0:8002, 0.0.0.0:8445 ssl
      KONG_ADMIN_GUI_URL: http://${GW_HOST:-localhost}:8002
      KONG_PASSWORD: handyshake
    ports:
      - "8000:8000"  # Proxy HTTP
      - "8443:8443"  # Proxy HTTPS
      - "8001:8001"  # Admin API HTTP
      - "8444:8444"  # Admin API HTTPS
      - "8002:8002"  # Kong Manager HTTP
      - "8445:8445"  # Kong Manager HTTPS
    volumes:
      - ./kong/config:/kong/declarative/
    networks:
      - backend-network
    command: kong start

  # MICROSERVICES

  # BROKERS

  rabbitmq:
    image: rabbitmq:management
    restart: on-failure
    environment:
      RABBITMQ_DEFAULT_USER: kacper
      RABBITMQ_DEFAULT_PASS: kacper
      RABBITMQ_DEFAULT_VHOST: rabbitmq
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: -rabbitmq_management load_definitions "/etc/rabbitmq/definitions.json"
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq:/var/lib/rabbitmq
      - ./rabbitmq/config:/etc/rabbitmq
    networks:
      - backend-network

  # SECRETS

  vault:
    image: vault:1.13.3
    restart: on-failure
    ports:
      - "8200:8200"
    volumes:
      - ./vault/data:/vault/file
      - ./vault/config:/vault/config
      - ./vault/logs:/vault/logs
    networks:
      - backend-network
    cap_add:
      - IPC_LOCK
    command: vault server -config=/vault/config/vault.json

  # CERT MANAGER

#  certbot:
#    image: certbot/certbot
#    restart: on-failure
#    volumes:
#      - ./certbot/etc/letsencrypt:/etc/letsencrypt
#      - ./certbot/var/lib/letsencrypt:/var/lib/letsencrypt
#    command: certonly

  # REGISTRY

  registry:
    image: registry:latest
    restart: on-failure
    volumes:
      - ./registry/data:/var/lib/registry
    networks:
      - backend-network

  # DATABASES

  postgresql:
    image: postgres:latest
    restart: on-failure
    environment:
      POSTGRES_USER: kacper
      POSTGRES_PASSWORD: kacper
      POSTGRES_DB: parcelplatform
    ports:
      - "5432:5432"
    volumes:
      - postgresql:/var/lib/postgresql/data
    networks:
      - db-network
  redis:
    image: redis:latest
    restart: on-failure
    volumes:
      - redis:/data
    networks:
      - backend-network
  mongo:
    image: mongo:latest
    restart: on-failure
    environment:
      MONGO_INITDB_ROOT_USERNAME: kacper
      MONGO_INITDB_ROOT_PASSWORD: kacper
    volumes:
      - mongodb:/data/db
    networks:
      - db-network
  minio:
    image: quay.io/minio/minio:latest
    restart: on-failure
    environment:
      MINIO_ROOT_USER: kacperkacper
      MINIO_ROOT_PASSWORD: kacperkacper
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./minio/data:/data
    networks:
      - db-network
    command: server /data --console-address ":9001"

  ## DATABASE GUI

  pgadmin:
    image: dpage/pgadmin4:latest
    restart: on-failure
    environment:
      PGADMIN_DEFAULT_EMAIL: kacper@kacper.pl
      PGADMIN_DEFAULT_PASSWORD: kacper
    ports:
      - "8080:80"
    networks:
      - db-network
      - monitoring-network
  mongo-express:
    image: mongo-express:latest
    restart: on-failure
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: kacper
      ME_CONFIG_MONGODB_ADMINPASSWORD: kacper
      ME_CONFIG_MONGODB_URL: mongodb://kacper:kacper@mongo:27017/
      ME_CONFIG_BASICAUTH: false
    networks:
      - db-network
      - monitoring-network
  redisinsight:
    image: redis/redisinsight:latest
    restart: on-failure
    ports:
      - "5540:5540"
    volumes:
      - redisinsight:/data
    networks:
      - backend-network
      - monitoring-network

  # MONITORING

  prometheus:
    image: prom/prometheus:main
    restart: on-failure
    networks:
      - monitoring-network
    volumes:
      - ./prometheus/config/prometheus.yml:/etc/prometheus/prometheus.yml
  grafana:
    image: grafana/grafana:12.2.0-ubuntu
    restart: on-failure
    ports:
      - "3000:3000"
    networks:
      - monitoring-network


volumes:
  postgresql:
  mongodb:
  redis:
  redisinsight:
  rabbitmq:

networks:
  backend-network:
  db-network:
  monitoring-network: